# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class FieldDefinition(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name: str=None, type: str=None, required: bool=None, additional_description: str=None):
        """
        FieldDefinition - a model defined in Swagger

        :param name: The name of this FieldDefinition.
        :type name: str
        :param type: The type of this FieldDefinition.
        :type type: str
        :param required: The required of this FieldDefinition.
        :type required: bool
        :param additional_description: The additional_description of this FieldDefinition.
        :type additional_description: str
        """
        self.swagger_types = {
            'name': str,
            'type': str,
            'required': bool,
            'additional_description': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'required': 'required',
            'additional_description': 'additional_description'
        }

        self._name = name
        self._type = type
        self._required = required
        self._additional_description = additional_description

    @classmethod
    def from_dict(cls, dikt) -> 'FieldDefinition':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FieldDefinition of this FieldDefinition.
        :rtype: FieldDefinition
        """
        return deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """
        Gets the name of this FieldDefinition.
        json field name

        :return: The name of this FieldDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this FieldDefinition.
        json field name

        :param name: The name of this FieldDefinition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self) -> str:
        """
        Gets the type of this FieldDefinition.
        Type of field

        :return: The type of this FieldDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """
        Sets the type of this FieldDefinition.
        Type of field

        :param type: The type of this FieldDefinition.
        :type type: str
        """
        allowed_values = ["string", "int", "float", "file"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def required(self) -> bool:
        """
        Gets the required of this FieldDefinition.
        is field required

        :return: The required of this FieldDefinition.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required: bool):
        """
        Sets the required of this FieldDefinition.
        is field required

        :param required: The required of this FieldDefinition.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def additional_description(self) -> str:
        """
        Gets the additional_description of this FieldDefinition.

        :return: The additional_description of this FieldDefinition.
        :rtype: str
        """
        return self._additional_description

    @additional_description.setter
    def additional_description(self, additional_description: str):
        """
        Sets the additional_description of this FieldDefinition.

        :param additional_description: The additional_description of this FieldDefinition.
        :type additional_description: str
        """

        self._additional_description = additional_description

